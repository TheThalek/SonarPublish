/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sonarData.proto */

#ifndef PROTOBUF_C_sonarData_2eproto__INCLUDED
#define PROTOBUF_C_sonarData_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _SonarData__GeorefNED SonarData__GeorefNED;
typedef struct _SonarData__GeorefECEF SonarData__GeorefECEF;
typedef struct _SonarData__Telemetry SonarData__Telemetry;
typedef struct _SonarData__TelemetryDataPosition SonarData__TelemetryDataPosition;
typedef struct _SonarData__TelemetryDataPose SonarData__TelemetryDataPose;
typedef struct _SonarData__TelemetryDataHeading SonarData__TelemetryDataHeading;
typedef struct _SonarData__TelemetryDataDepth SonarData__TelemetryDataDepth;
typedef struct _SonarData__TelemetryDataAltitude SonarData__TelemetryDataAltitude;
typedef struct _SonarData__Ungeoref SonarData__Ungeoref;


/* --- enums --- */


/* --- messages --- */

/*
 * Georeferenced point cloud data with rotation matrix
 */
struct  _SonarData__GeorefNED
{
  ProtobufCMessage base;
  /*
   * X coordinates of points, referenced wrt. body frame of robot
   */
  size_t n_x_pointcld_body_ned;
  float *x_pointcld_body_ned;
  /*
   * Y coordinates of points
   */
  size_t n_y_pointcld_body_ned;
  float *y_pointcld_body_ned;
  /*
   * Z coordinates of points
   */
  size_t n_z_pointcld_body_ned;
  float *z_pointcld_body_ned;
  /*
   * Rotation matrix (flattened 3x3 matrix)
   */
  size_t n_rotationmatrix_ned;
  float *rotationmatrix_ned;
};
#define SONAR_DATA__GEOREF__NED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sonar_data__georef__ned__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * Georeferenced point cloud data with rotation matrix
 */
struct  _SonarData__GeorefECEF
{
  ProtobufCMessage base;
  /*
   * X coordinates of points, referenced wrt. body frame of robot
   */
  size_t n_x_pointcld_body_ecef;
  float *x_pointcld_body_ecef;
  /*
   * Y coordinates of points
   */
  size_t n_y_pointcld_body_ecef;
  float *y_pointcld_body_ecef;
  /*
   * Z coordinates of points
   */
  size_t n_z_pointcld_body_ecef;
  float *z_pointcld_body_ecef;
  /*
   * Rotation matrix (flattened 3x3 matrix)
   */
  size_t n_rotationmatrix_ecef;
  float *rotationmatrix_ecef;
  float x_body_position_ecef;
  float y_body_position_ecef;
  float z_body_position_ecef;
};
#define SONAR_DATA__GEOREF__ECEF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sonar_data__georef__ecef__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0 }


/*
 * --------------------- telemetry data ---------------------
 */
struct  _SonarData__Telemetry
{
  ProtobufCMessage base;
  SonarData__TelemetryDataPosition *position;
  SonarData__TelemetryDataPose *pose;
  SonarData__TelemetryDataHeading *heading;
  SonarData__TelemetryDataDepth *depth;
  SonarData__TelemetryDataAltitude *altitude;
};
#define SONAR_DATA__TELEMETRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sonar_data__telemetry__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


struct  _SonarData__TelemetryDataPosition
{
  ProtobufCMessage base;
  float latitude;
  float longitude;
  int32_t position_timestep;
};
#define SONAR_DATA__TELEMETRY_DATA_POSITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sonar_data__telemetry_data_position__descriptor) \
    , 0, 0, 0 }


struct  _SonarData__TelemetryDataPose
{
  ProtobufCMessage base;
  float roll;
  float pitch;
  int32_t pose_timestep;
};
#define SONAR_DATA__TELEMETRY_DATA_POSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sonar_data__telemetry_data_pose__descriptor) \
    , 0, 0, 0 }


struct  _SonarData__TelemetryDataHeading
{
  ProtobufCMessage base;
  float heading;
  int32_t heading_timestep;
};
#define SONAR_DATA__TELEMETRY_DATA_HEADING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sonar_data__telemetry_data_heading__descriptor) \
    , 0, 0 }


struct  _SonarData__TelemetryDataDepth
{
  ProtobufCMessage base;
  float depth;
  int32_t depth_timestep;
};
#define SONAR_DATA__TELEMETRY_DATA_DEPTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sonar_data__telemetry_data_depth__descriptor) \
    , 0, 0 }


struct  _SonarData__TelemetryDataAltitude
{
  ProtobufCMessage base;
  float altitude;
  int32_t altitude_timestep;
};
#define SONAR_DATA__TELEMETRY_DATA_ALTITUDE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sonar_data__telemetry_data_altitude__descriptor) \
    , 0, 0 }


/*
 * --------------------- Ungeoreferenced point cloud data ---------------------
 */
struct  _SonarData__Ungeoref
{
  ProtobufCMessage base;
  size_t n_pointx;
  float *pointx;
  size_t n_pointy;
  float *pointy;
  size_t n_beamidx;
  int32_t *beamidx;
  size_t n_quality;
  uint32_t *quality;
  size_t n_intensity;
  float *intensity;
};
#define SONAR_DATA__UNGEOREF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sonar_data__ungeoref__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/* SonarData__GeorefNED methods */
void   sonar_data__georef__ned__init
                     (SonarData__GeorefNED         *message);
size_t sonar_data__georef__ned__get_packed_size
                     (const SonarData__GeorefNED   *message);
size_t sonar_data__georef__ned__pack
                     (const SonarData__GeorefNED   *message,
                      uint8_t             *out);
size_t sonar_data__georef__ned__pack_to_buffer
                     (const SonarData__GeorefNED   *message,
                      ProtobufCBuffer     *buffer);
SonarData__GeorefNED *
       sonar_data__georef__ned__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sonar_data__georef__ned__free_unpacked
                     (SonarData__GeorefNED *message,
                      ProtobufCAllocator *allocator);
/* SonarData__GeorefECEF methods */
void   sonar_data__georef__ecef__init
                     (SonarData__GeorefECEF         *message);
size_t sonar_data__georef__ecef__get_packed_size
                     (const SonarData__GeorefECEF   *message);
size_t sonar_data__georef__ecef__pack
                     (const SonarData__GeorefECEF   *message,
                      uint8_t             *out);
size_t sonar_data__georef__ecef__pack_to_buffer
                     (const SonarData__GeorefECEF   *message,
                      ProtobufCBuffer     *buffer);
SonarData__GeorefECEF *
       sonar_data__georef__ecef__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sonar_data__georef__ecef__free_unpacked
                     (SonarData__GeorefECEF *message,
                      ProtobufCAllocator *allocator);
/* SonarData__Telemetry methods */
void   sonar_data__telemetry__init
                     (SonarData__Telemetry         *message);
size_t sonar_data__telemetry__get_packed_size
                     (const SonarData__Telemetry   *message);
size_t sonar_data__telemetry__pack
                     (const SonarData__Telemetry   *message,
                      uint8_t             *out);
size_t sonar_data__telemetry__pack_to_buffer
                     (const SonarData__Telemetry   *message,
                      ProtobufCBuffer     *buffer);
SonarData__Telemetry *
       sonar_data__telemetry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sonar_data__telemetry__free_unpacked
                     (SonarData__Telemetry *message,
                      ProtobufCAllocator *allocator);
/* SonarData__TelemetryDataPosition methods */
void   sonar_data__telemetry_data_position__init
                     (SonarData__TelemetryDataPosition         *message);
size_t sonar_data__telemetry_data_position__get_packed_size
                     (const SonarData__TelemetryDataPosition   *message);
size_t sonar_data__telemetry_data_position__pack
                     (const SonarData__TelemetryDataPosition   *message,
                      uint8_t             *out);
size_t sonar_data__telemetry_data_position__pack_to_buffer
                     (const SonarData__TelemetryDataPosition   *message,
                      ProtobufCBuffer     *buffer);
SonarData__TelemetryDataPosition *
       sonar_data__telemetry_data_position__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sonar_data__telemetry_data_position__free_unpacked
                     (SonarData__TelemetryDataPosition *message,
                      ProtobufCAllocator *allocator);
/* SonarData__TelemetryDataPose methods */
void   sonar_data__telemetry_data_pose__init
                     (SonarData__TelemetryDataPose         *message);
size_t sonar_data__telemetry_data_pose__get_packed_size
                     (const SonarData__TelemetryDataPose   *message);
size_t sonar_data__telemetry_data_pose__pack
                     (const SonarData__TelemetryDataPose   *message,
                      uint8_t             *out);
size_t sonar_data__telemetry_data_pose__pack_to_buffer
                     (const SonarData__TelemetryDataPose   *message,
                      ProtobufCBuffer     *buffer);
SonarData__TelemetryDataPose *
       sonar_data__telemetry_data_pose__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sonar_data__telemetry_data_pose__free_unpacked
                     (SonarData__TelemetryDataPose *message,
                      ProtobufCAllocator *allocator);
/* SonarData__TelemetryDataHeading methods */
void   sonar_data__telemetry_data_heading__init
                     (SonarData__TelemetryDataHeading         *message);
size_t sonar_data__telemetry_data_heading__get_packed_size
                     (const SonarData__TelemetryDataHeading   *message);
size_t sonar_data__telemetry_data_heading__pack
                     (const SonarData__TelemetryDataHeading   *message,
                      uint8_t             *out);
size_t sonar_data__telemetry_data_heading__pack_to_buffer
                     (const SonarData__TelemetryDataHeading   *message,
                      ProtobufCBuffer     *buffer);
SonarData__TelemetryDataHeading *
       sonar_data__telemetry_data_heading__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sonar_data__telemetry_data_heading__free_unpacked
                     (SonarData__TelemetryDataHeading *message,
                      ProtobufCAllocator *allocator);
/* SonarData__TelemetryDataDepth methods */
void   sonar_data__telemetry_data_depth__init
                     (SonarData__TelemetryDataDepth         *message);
size_t sonar_data__telemetry_data_depth__get_packed_size
                     (const SonarData__TelemetryDataDepth   *message);
size_t sonar_data__telemetry_data_depth__pack
                     (const SonarData__TelemetryDataDepth   *message,
                      uint8_t             *out);
size_t sonar_data__telemetry_data_depth__pack_to_buffer
                     (const SonarData__TelemetryDataDepth   *message,
                      ProtobufCBuffer     *buffer);
SonarData__TelemetryDataDepth *
       sonar_data__telemetry_data_depth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sonar_data__telemetry_data_depth__free_unpacked
                     (SonarData__TelemetryDataDepth *message,
                      ProtobufCAllocator *allocator);
/* SonarData__TelemetryDataAltitude methods */
void   sonar_data__telemetry_data_altitude__init
                     (SonarData__TelemetryDataAltitude         *message);
size_t sonar_data__telemetry_data_altitude__get_packed_size
                     (const SonarData__TelemetryDataAltitude   *message);
size_t sonar_data__telemetry_data_altitude__pack
                     (const SonarData__TelemetryDataAltitude   *message,
                      uint8_t             *out);
size_t sonar_data__telemetry_data_altitude__pack_to_buffer
                     (const SonarData__TelemetryDataAltitude   *message,
                      ProtobufCBuffer     *buffer);
SonarData__TelemetryDataAltitude *
       sonar_data__telemetry_data_altitude__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sonar_data__telemetry_data_altitude__free_unpacked
                     (SonarData__TelemetryDataAltitude *message,
                      ProtobufCAllocator *allocator);
/* SonarData__Ungeoref methods */
void   sonar_data__ungeoref__init
                     (SonarData__Ungeoref         *message);
size_t sonar_data__ungeoref__get_packed_size
                     (const SonarData__Ungeoref   *message);
size_t sonar_data__ungeoref__pack
                     (const SonarData__Ungeoref   *message,
                      uint8_t             *out);
size_t sonar_data__ungeoref__pack_to_buffer
                     (const SonarData__Ungeoref   *message,
                      ProtobufCBuffer     *buffer);
SonarData__Ungeoref *
       sonar_data__ungeoref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sonar_data__ungeoref__free_unpacked
                     (SonarData__Ungeoref *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SonarData__GeorefNED_Closure)
                 (const SonarData__GeorefNED *message,
                  void *closure_data);
typedef void (*SonarData__GeorefECEF_Closure)
                 (const SonarData__GeorefECEF *message,
                  void *closure_data);
typedef void (*SonarData__Telemetry_Closure)
                 (const SonarData__Telemetry *message,
                  void *closure_data);
typedef void (*SonarData__TelemetryDataPosition_Closure)
                 (const SonarData__TelemetryDataPosition *message,
                  void *closure_data);
typedef void (*SonarData__TelemetryDataPose_Closure)
                 (const SonarData__TelemetryDataPose *message,
                  void *closure_data);
typedef void (*SonarData__TelemetryDataHeading_Closure)
                 (const SonarData__TelemetryDataHeading *message,
                  void *closure_data);
typedef void (*SonarData__TelemetryDataDepth_Closure)
                 (const SonarData__TelemetryDataDepth *message,
                  void *closure_data);
typedef void (*SonarData__TelemetryDataAltitude_Closure)
                 (const SonarData__TelemetryDataAltitude *message,
                  void *closure_data);
typedef void (*SonarData__Ungeoref_Closure)
                 (const SonarData__Ungeoref *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor sonar_data__georef__ned__descriptor;
extern const ProtobufCMessageDescriptor sonar_data__georef__ecef__descriptor;
extern const ProtobufCMessageDescriptor sonar_data__telemetry__descriptor;
extern const ProtobufCMessageDescriptor sonar_data__telemetry_data_position__descriptor;
extern const ProtobufCMessageDescriptor sonar_data__telemetry_data_pose__descriptor;
extern const ProtobufCMessageDescriptor sonar_data__telemetry_data_heading__descriptor;
extern const ProtobufCMessageDescriptor sonar_data__telemetry_data_depth__descriptor;
extern const ProtobufCMessageDescriptor sonar_data__telemetry_data_altitude__descriptor;
extern const ProtobufCMessageDescriptor sonar_data__ungeoref__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sonarData_2eproto__INCLUDED */
